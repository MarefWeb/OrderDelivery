from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN, DB_NAME, Step, CHAT_OUTPUT, CREDENTIALS_FILE, SPREAD_SHEET_ID
from keyboard import work_type_kb, order_answer_kb
from sqlite import SQLighter
from oauth2client.service_account import ServiceAccountCredentials
import requests
import os
import random
import httplib2
import googleapiclient.discovery

bot = Bot(TOKEN)
dp = Dispatcher(bot)

db = SQLighter(DB_NAME)


async def add_client(message, chat_id, username):
    db.add_client(chat_id=chat_id, username=username)
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ö–∞–∫–æ–π –≤–∏–¥ —É—Å–ª—É–≥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=work_type_kb)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if 'username' in message.from_user:
        chat_id = message.from_user.id
        username = '@' + message.from_user.username
        step_list = db.get_step(username)

        if step_list is None:
            await add_client(message=message, chat_id=chat_id, username=username)

        else:
            step = step_list[0]

            if step == Step.CHOOSE_WORK_TYPE.value:
                await message.answer('–°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã.\n'
                                     '–¢–∞–∫ –∫–∞–∫–æ–π –≤–∏–¥ —É—Å–ª—É–≥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=work_type_kb)

            elif step == Step.ENTER_BUDGET.value:
                await message.answer('–°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞.\n'
                                     '–ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –ø–æ –Ω–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ "-".\n'
                                     '–ò–ª–∏ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é–≤ —ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ? (–≤ —Ä—É–±–ª—è—Ö)')

            elif step == Step.SEND_TASK_FILE.value:
                await message.answer('–°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∞–ø–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n'
                                     '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∞ —Ü–µ–ª—å —Ä–∞–±–æ—Ç—ã –∏ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:')

            elif step == Step.COMPLETE.value:
                db.reset_data(username=username)
                await message.answer('–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å. –ö–∞–∫–æ–π –≤–∏–¥ —É—Å–ª—É–≥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–π—á–∞—Å?',
                                     reply_markup=work_type_kb)

            else:
                await add_client(message=message, chat_id=chat_id, username=username)

    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–Ω. –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º!')


@dp.message_handler(commands=['reset'])
async def reset(message: types.Message):
    username = '@' + message.from_user.username

    db.reset_data(username)
    await message.answer('–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?', reply_markup=work_type_kb)


def check_work_type_readiness(callback):
    if callback.data == 'work_type_bot' or callback.data == 'work_type_site':
        username = '@' + callback.from_user.username
        return db.get_step(username)[0] == Step.CHOOSE_WORK_TYPE.value
    else:
        return False


@dp.callback_query_handler(lambda callback: check_work_type_readiness(callback))
async def work_type(callback_query: types.CallbackQuery):
    username = '@' + callback_query.from_user.username

    if callback_query.data == 'work_type_bot':
        db.update_work_type(username, '—Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç')
    elif callback_query.data == 'work_type_site':
        db.update_work_type(username, '—Å–∞–π—Ç')

    db.update_step(username=username, step=Step.ENTER_BUDGET.value)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞.\n'
                                                        '–ï—Å–ª–∏ –Ω–∞ –Ω–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ "-".\n'
                                                        '–ò–ª–∏ –∂–µ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ (–≤ —Ä—É–±–ª—è—Ö):')


@dp.message_handler(lambda message: db.get_step('@' + message.from_user.username)[0] == Step.ENTER_BUDGET.value)
async def enter_budget(message: types.Message):
    username = '@' + message.from_user.username
    budget = message.text

    if not budget.isdigit() and budget != '-':
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')

    else:
        if budget == '-':
            db.update_budget(username=username, budget='–Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ')
        else:
            db.update_budget(username=username, budget=budget + '—Ä')

        db.update_step(username=username, step=Step.SEND_TASK_FILE.value)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º:')


@dp.message_handler(lambda m: db.get_step('@' + m.from_user.username)[0] == Step.SEND_TASK_FILE.value,
                    content_types=types.ContentType.DOCUMENT)
async def send_photo(message: types.Message):
    username = '@' + message.from_user.username

    doc_id = message.document.file_id
    file_info = await bot.get_file(doc_id)
    file_path = file_info.file_path
    file_name = message.document.file_name
    r = requests.get(f'https://api.telegram.org/file/bot{TOKEN}/{file_path}')

    while file_name in os.listdir('Tasks'):
        file_name = file_name.split('.')
        file_name[0] = file_name[0] + str(random.randrange(100))
        file_name = '.'.join(file_name)

    with open(f'Tasks/{file_name}', 'wb') as f:
        f.write(r.content)

    db.update_task_file(username=username, task_file=file_name)
    db.update_step(username=username, step=Step.COMPLETE.value)
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑.\n–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.')

    client_info = db.get_client_data(username)
    client_username = client_info[2]
    client_work_type = client_info[3]
    client_budget = client_info[4]
    client_task_file = open('Tasks\\' + client_info[5], 'rb')

    await bot.send_document(chat_id=CHAT_OUTPUT, document=client_task_file, caption=f'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µüëÜüëÜüëÜ\n'
                                                                                    f'–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
                                                                                    f'  {client_username}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: '
                                                                                    f' {client_work_type}\n'
                                                                                    f'–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞:  {client_budget}',
                            reply_markup=order_answer_kb)


@dp.callback_query_handler(lambda callback: str(callback.message.chat.id) == CHAT_OUTPUT)
async def order_answer(callback_query: types.CallbackQuery):
    client_username = callback_query.message.caption.split('\n')[1].split(':  ')[1]
    client_chat_id = db.get_client_data(client_username)[1]
    order_status = db.get_order_status(client_username)[0]

    if callback_query.data == 'order_answer_accept':
        if order_status == 1:
            await bot.answer_callback_query(callback_query_id=callback_query.id,
                                            text='–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç!')
            return
        else:
            client_work_type = db.get_client_data(client_username)[3]
            client_budget = db.get_client_data(client_username)[4]
            client_task_file = db.get_client_data(client_username)[5]

            spreadsheets_data = [client_username, client_work_type, client_budget, client_task_file]

            credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'])
            http_auth = credentials.authorize(httplib2.Http())
            service = googleapiclient.discovery.build('sheets', 'v4', http=http_auth)

            busy = True
            cell_number = 1

            while busy:
                ranges = [f'–∑–∞–∫–∞–∑—ã!A{cell_number}:d{cell_number}']

                result = service.spreadsheets().values().batchGet(spreadsheetId=SPREAD_SHEET_ID,
                                                                  ranges=ranges,
                                                                  valueRenderOption='FORMATTED_VALUE',
                                                                  dateTimeRenderOption='FORMATTED_STRING').execute()

                if 'values' in result['valueRanges'][0]:
                    cell_number += 1

                else:
                    ranges = f'–∑–∞–∫–∞–∑—ã!A{cell_number}:D{cell_number}'

                    service.spreadsheets().values().batchUpdate(spreadsheetId=SPREAD_SHEET_ID,
                                                                body={
                                                                    'valueInputOption': 'USER_ENTERED',
                                                                    'data': [
                                                                        {
                                                                            'range': ranges,
                                                                            'majorDimension': 'ROWS',
                                                                            'values': [
                                                                                spreadsheets_data
                                                                            ]
                                                                        }
                                                                    ]
                                                                }).execute()

                    busy = False

            db.active_order(client_username)
            await bot.send_message(client_chat_id, '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!')

    elif callback_query.data == 'order_answer_dismiss':
        if order_status == 1:
            await bot.answer_callback_query(callback_query_id=callback_query.id,
                                            text='–ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è, –≤—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑!')
            return
        else:
            db.reset_data(client_username)
            await callback_query.message.delete()
            await bot.send_message(client_chat_id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.')

    await bot.answer_callback_query(callback_query.id)


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp)
